package @LANG_PACKAGE@.components;

import @COMP_PACKAGE@.@COMP_CLASS@
import @LANG_PACKAGE@.printer.@LANG@Printer
import @LANG_PACKAGE@.templateBase.@LANG@PsiElementComponent
import org.jetbrains.format.FormatSet
import org.jetbrains.prettyPrinter.core.printer.CommentConnectionUtils.VariantConstructionContext
import org.jetbrains.prettyPrinter.core.templateBase.template.PsiTemplateGen
import org.jetbrains.prettyPrinter.core.templateBase.template.SmartInsertPlace
import java.util.ArrayList
import java.util.HashMap
import java.util.HashSet

class @COMP_CLASS@Component(
        printer: @LANG@Printer
): @LANG@PsiElementComponent<@COMP_CLASS@, SmartInsertPlace, PsiTemplateGen<@COMP_CLASS@, SmartInsertPlace>>(printer)

{
    @GET_SUBTREES@

    override fun getVariants(p: @COMP_CLASS@, context: VariantConstructionContext): FormatSet {
        val list = ArrayList<FormatSet>()

        @GET_SUBTREES_VARIANTS@
        val firstElem = list.get(0)

        return list.drop(1).fold(firstElem) { r, e -> r % e }
    }

    override fun getTmplt(p: @COMP_CLASS@): PsiTemplateGen<@COMP_CLASS@, SmartInsertPlace>? {
        return getTemplateFromElement(p)
    }

    override fun getNewElement(
            p: @COMP_CLASS@
            , text: String
    ): @COMP_CLASS@? {
        return null
    }

    override fun updateSubtreeVariants(
            p       : @COMP_CLASS@
            , tmplt   : PsiTemplateGen<@COMP_CLASS@, SmartInsertPlace>
            , variants: Map<String, FormatSet>
            , context: VariantConstructionContext
    ): Map<String, FormatSet> {
        return variants
    }

    override fun prepareSubtreeVariants(
            p: @COMP_CLASS@
            , context: VariantConstructionContext
    ): Map<String, FormatSet> = HashMap()

    override fun getTags(p: @COMP_CLASS@): Set<String>  = HashSet()

    override fun isTemplateSuitable(
            p: @COMP_CLASS@
            , tmplt: PsiTemplateGen<@COMP_CLASS@, SmartInsertPlace>
    ): Boolean {
        return true
    }

    override fun getTemplateFromElement(newP: @COMP_CLASS@): PsiTemplateGen<@COMP_CLASS@, SmartInsertPlace>? = null
}
